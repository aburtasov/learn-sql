SELECT 'Столбец 1', 'Столбец 2', 'Столбец N' FROM 'Имя Таблицы';

#----------------------------------------------------------------

qlite> .tables
courses grades streams students
sqlite>

#---------------------------------------------------------------


sqlite> .header on
sqlite> .mode column
sqlite> SELECT * FROM students WHERE surname = 'Иванов';
id surname name
---------- ---------- ----------
1 Иванов Игорь
sqlite>

#--------------------------------------------------------------

sqlite> SELECT stream_id, grade FROM grades WHERE student_id = 1;
stream_id grade
---------- -------------
1 4.9
2 4.9
3 5
sqlite>

#-------------------------------------------------------------

Если все записи, возвращаемые запросом, нас не интересуют, мы можем ограничить количество
строк результата посредством ключевого слова LIMIT. Например, нам надо узнать, закончил ли ученик
хотя бы один из курсов. В этом случае в конце команды определяется ограничение LIMIT 1:


sqlite> SELECT stream_id, grade FROM grades WHERE student_id = 1 LIMIT 1;
stream_id grade
---------- -------------
1 4.9
sqlite>

#------------------------------------------------------------------------------------------------------------

Мы можем отсортировать вывод по одному или нескольким столбцам в прямом и обратном порядке,
используя инструкцию ORDER BY. Для сортировки по возрастанию значений надо задать ASC, для
сортировки в обратном порядке — DESC. В примере ниже отсортируем содержимое таблицы оценок
по значению средней оценки в порядке возрастания значений:

sqlite> SELECT * FROM grades ORDER BY grade ASC;
student_id stream_id grade
---------- ---------- -------------
1 1 4.9
1 2 4.9
2 1 5
1 3 5
sqlite>

Если мы хотим отсортировать данные в обратном порядке, то потребуется указать ключевое слово
DESC:

sqlite> SELECT * FROM grades ORDER BY grade DESC;
student_id stream_id grade
---------- ---------- -------------
2 1 5
1 3 5
1 1 4.9
1 2 4.9
sqlite>

#------------------------------------------------------------------------------------------------------------

Например, нам надо найти идентификаторы всех учеников, кто окончил хотя бы один курс. Для этого
воспользуемся простым запросом ниже
sqlite> SELECT student_id FROM grades;
student_id
----------
1
1
1
2
sqlite>

Проблема такого решения в том, что мы получим и все дублирующие значения идентификаторов,
которые сейчас нам не требуются. Чтобы избавиться от дубликатов, применяется ключевое слово
DISTINCT, которое даёт указание СУБД вернуть только уникальные значения из всей выборки:

sqlite> SELECT DISTINCT(student_id) FROM grades;
student_id
----------
1
2
sqlite>

#------------------------------------------------------------------------------------------------------------

sqlite> SELECT name FROM courses WHERE lessons_amount != 12;
name

qlite> SELECT name FROM courses WHERE lessons_amount < 12;
name
----------------------
Linux. Рабочая станция
Основы Python
sqlite> SELECT name FROM courses WHERE lessons_amount > 8;
name
-----------
Базы данных
sqlite>

sqlite> SELECT * FROM streams WHERE number > 40 AND number < 50;
id number course_id start_date
---------- ---------- ---------- ----------
1 45 2 2020-08-18
2 48 3 2020-10-02
sqlite>

sqlite> SELECT * FROM streams WHERE course_id = 1 OR course_id = 3;
id number course_id start_date
---------- ---------- ---------- ----------
2 48 3 2020-10-02
3 54 1 2020-11-12
sqlite>

sqlite> SELECT number, start_date FROM streams WHERE number BETWEEN 45 AND 50;
number start_date
---------- ----------
45 2020-08-18
48 2020-10-02
sqlite>

sqlite> SELECT lessons_amount FROM courses WHERE name = 'Linux. Рабочая станция'
OR name = 'Основы Python';
lessons_amount
--------------
8
8
sqlite>

Но со списками удобнее работать, используя ключевое слово IN, для которого в скобках мы
перечисляем все искомые значения:
sqlite> SELECT lessons_amount FROM courses WHERE name IN('Linux. Рабочая
станция', 'Основы Python');
lessons_amount
--------------
8
8
sqlite>

#----------------------------------------------------------------------------------------------

sqlite> SELECT name, lessons_amount FROM courses WHERE lessons_amount IS NULL;
sqlite> SELECT name, lessons_amount FROM courses WHERE lessons_amount IS NOT
NULL;
name lessons_amount
----------- --------------
Базы данных 12
Linux. Рабо 8
Основы Pyth 8
sqlite>


#---------------------------------------------------------------------------------------------

Предположим, мы знаем, что в имени курса есть слово Linux, но точное название курса нам
неизвестно. В этом случае воспользуемся функцией сопоставления с шаблоном LIKE. Передадим
этой функции параметром искомую строку, заключённую с двух сторон символами процента. Символ
процента — это знак подстановки, который говорит, что в этой части строки находится любое
количество разных символов:
sqlite> SELECT name, lessons_amount FROM courses WHERE name LIKE('%Linux%');
name lessons_amount
---------------------- --------------
Linux. Рабочая станция 8
sqlite>

На практике для этой функции скобки часто не используются. Тогда наш запрос примет следующий
вид:
sqlite> SELECT name, lessons_amount FROM courses WHERE name LIKE '%Linux%';
name lessons_amount
---------------------- --------------
Linux. Рабочая станция 8
sqlite>

#------------------------------------------------------------------------------------------------

sqlite> SELECT CURRENT_TIMESTAMP;
2021-01-05 17:21:20
sqlite>

sqlite> SELECT DATE('now');
DATE('now')
-----------
2021-01-10
sqlite> SELECT TIME('now');
TIME('now')
-----------
09:04:57
sqlite> SELECT DATETIME('now');
DATETIME('now')
-------------------
2021-01-10 09:05:02
sqlite>

sqlite> SELECT DATE(CURRENT_TIMESTAMP);
DATE(CURRENT_TIMESTAMP)
-----------------------
2021-01-10
sqlite> SELECT TIME(CURRENT_TIMESTAMP);
TIME(CURRENT_TIMESTAMP)
-----------------------
09:17:37
sqlite> SELECT DATETIME(CURRENT_TIMESTAMP);
DATETIME(CURRENT_TIMESTAMP)
---------------------------
2021-01-10 09:17:46
sqlite>

#-----------------------------------------------------------------------------------------------

sqlite> SELECT DATE('2021-01-05 17:21:20');
DATE('2021-01-05 17:21:20')
---------------------------
2021-01-05
sqlite> SELECT TIME('2021-01-05 17:21:20');
TIME('2021-01-05 17:21:20')
---------------------------
17:21:20
sqlite>

#-----------------------------------------------------------------------------------------------

sqlite> SELECT start_date FROM streams;
start_date
----------
18.08.2020
02.10.2020
12.11.2020
sqlite>

Привести данные к подходящему виду позволит функция SUBSTRING (сокращённо — SUBSTR),
вырезающая часть строки.
Чтобы понять, как работает эта функция, рассмотрим сначала простой пример. Пусть из текущей
даты, которая получена функцией CURRENT_TIMESTAMP, нам надо получить только год.

sqlite> SELECT CURRENT_TIMESTAMP;
CURRENT_TIMESTAMP
-------------------
2021-01-10 09:39:37
sqlite>

sqlite> SELECT SUBSTR(CURRENT_TIMESTAMP, 1, 4);
SUBSTR(CURRENT_TIMESTAMP, 1, 4)
-------------------------------
2021
sqlite>

sqlite> SELECT SUBSTR(start_date, 7, 4) || '-' || SUBSTR(start_date, 4, 2) ||
'-' || SUBSTR(start_date, 1, 2) FROM streams;
2020-08-18
2020-10-02
2020-11-12
sqlite>

Пример выше покажет даты в требуемом формате на экране, но в таблице формат её хранения не
изменится. Чтобы внести изменения, скомпонуем команду на обновление UPDATE, используя то же
выражение для замены значения в столбце start_date

sqlite> UPDATE streams SET start_date = SUBSTR(start_date, 7, 4) || '-' ||
SUBSTR(start_date, 4, 2) || '-' || SUBSTR(start_date, 1, 2);
sqlite> SELECT * FROM streams;
id number course_id start_date
---------- ---------- ---------- ----------
1 45 2 2020-08-18
2 48 3 2020-10-02
3 54 1 2020-11-12
sqlite>

#-------------------------------------------------------------------------------------------

При работе с данными часто возникают задачи по обработке набора некоторых значений, такие как
подсчёт количества, суммы, среднего значения и т. д. Операции такого типа называются
агрегированием. Во время работы с базами данных под агрегированием понимается выполнение
действий над значениями в различных строках таблицы посредством специальных функций, которые
называются функциями агрегирования, или просто агрегаторами.
Рассмотрим типичные задачи, которые требуют применения функций агрегирования:
● определение среднего значения;
© geekbrains.ru 12
● подсчёт количества;
● определение максимального и минимального значения;
● подсчёт суммы


В общем случае применяется функция агрегирования к данным всей таблицы. Например, найдём
среднюю оценку всех учеников. Для этого воспользуемся функцией нахождения среднего значения
AVG():

sqlite> SELECT AVG(grade) FROM grades;
AVG(grade)
------------------
4.95
sqlite>


Но как быть, если нам надо найти среднюю оценку по всем курсам для каждого ученика? В этом
случае потребуется группировка. То есть надо явным образом указать, по какому набору строк мы
хотим подсчитать результат. Если нам требуются данные в разрезе учеников, то логично в качестве
значения для группировки указать идентификатор ученика:

sqlite> SELECT student_id, AVG(grade) FROM grades GROUP BY student_id;
student_id AVG(grade)
---------- ------------------
1 4.93333333333333
2 5.0
sqlite>

#---------------------------------------------------------------------------------------------

Для подсчёта количества значений или строк применяется функция COUNT().
Найдём количество записей потоков для каждого курса. Чтобы подсчитать строки, определим
параметром функции COUNT знак подстановки «звёздочка» и сгруппируем данные в разрезе
идентификаторов курсов course_id:

sqlite> SELECT course_id, COUNT(*) FROM streams GROUP BY course_id;
course_id COUNT(*)
---------- ----------
1 1
2 1
3 1
sqlite>

Другой вид с именами столбцов получается посредством режима вывода line:

sqlite> .mode line
sqlite> SELECT course_id, COUNT(*) FROM streams GROUP BY course_id;
course_id = 1
COUNT(*) = 1
course_id = 2
COUNT(*) = 1
course_id = 3
COUNT(*) = 1
sqlite>

sqlite> .mode line
sqlite> SELECT course_id, COUNT(*) AS 'streams_total' FROM streams GROUP BY
course_id;
course_id = 1
streams_total = 1
course_id = 2
streams_total = 1
course_id = 3
streams_total = 1
sqlite>

#------------------------------------------------------------------------------------------------

sqlite> .header on
sqlite> .mode column
sqlite> SELECT student_id, MAX(grade) AS 'max_grade' FROM grades GROUP BY
student_id;
student_id max_grade
---------- ----------
1 5
2 5
sqlite>
sqlite> SELECT student_id, MIN(grade) AS 'min_grade' FROM grades GROUP BY
student_id;
student_id min_grade
---------- ----------
1 4.9
2 5
sqlite>

#------------------------------------------------------------------------------------------------

---------- ----------
1 5
2 5
sqlite>
sqlite> SELECT student_id, MIN(grade) AS 'min_grade' FROM grades GROUP BY
student_id;
student_id min_grade
---------- ----------
1 4.9
2 5
sqlite>

#---------------------------------------------------------------------------------------------------

Получение суммы
Функция SUM() позволит найти сумму значений столбца. Подсчитаем общее количество занятий по
всем курсам. Обратите внимание, что в этом случае группировка не требуется:
sqlite> SELECT SUM(lessons_amount) AS 'lessons_total' FROM courses;
lessons_total
-------------
28
sqlite>

#----------------------------------------------------------------------------------------------------------

Определить условие через WHERE мы можем только для данных, которые уже есть в таблице. В
рассмотренном примере значение min_grade рассчитывается посредством функции, то есть получаем
результат во время выполнения запроса. Мы получили ошибку, потому что условие WHERE нельзя
применять для рассчитываемых значений.
Для определения условия в таких случаях вместо WHERE применяется ключевое слово HAVING,
которое имеет тот же смысл — определяет фильтр для вывода результата:

sqlite> SELECT student_id, MIN(grade) AS min_grade FROM grades GROUP BY
student_id HAVING min_grade < 5;

#------------------------------------------------------------------------------------------------------------

SELECT
SUBSTR(DATE(), 1, 4) AS year,
lessons_amount,
COUNT(*) AS courses_amount
FROM courses
WHERE name LIKE '%Python%'
GROUP BY lessons_amount;

