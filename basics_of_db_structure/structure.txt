CREATE TABLE ИмяТаблицы(
Столбец 1 Тип Ограничения Первичный Ключ,
Столбец 2 Тип Ограничения,
Столбец 3 Тип Ограничения,
.....
Столбец N Тип Ограничения
);

Важно! Ввод команд языка SQL должен завершаться точкой с запятой.


#-----------------------------------------------------------------
В СУБД SQLite используются пять типов данных.

Данные Тип данных Описание
Нет значения NULL NULL — «ничего». Это непустая строка или ноль, NULL —
отсутствие значения.
Целое число INTEGER Целое число со знаком, например, 1, 56, -764.
Дробное число REAL Число с плавающей точкой, например, 34.568, -4.2
Строка, текст TEXT Строка текста, например, «Базы данных»
Двоичные
данные, медиа
BLOB Этот тип предназначен для хранения данных в исходном
формате. В столбце такого типа сохраняется, например,
изображение.

#-----------------------------------------------------------------

Определяем дополнительные условия для столбцов
В соответствии с логикой приложения часто требуется указать дополнительные условия для
некоторых столбцов. Например, сохранять данные об ученике без его фамилии имеет мало смысла.
Поэтому при создании таблицы определяется специальное условие, разрешающее сохранение только
непустого значения фамилии, оно выдаёт ошибку, если предпринимается попытка вставить строку без
фамилии ученика. Такие условия называются ограничениями, так как мы ограничиваем
использование данных в столбце только некоторыми допустимыми значениями.

Общепринятое название Синтаксис SQL Назначение ограничения
Ограничение на пустое
(NULL) значение
NOT NULL Гарантирует, что в ячейку вставится непустое
значение
Ограничение уникальности UNIQUE Гарантирует уникальность значений в пределах
таблицы
Значение по умолчанию DEFAULT Определяет значение по умолчанию 

#--------------------------------------------------------------------

Определяем ключевые столбцы
Для каждой таблицы требуется ключевой столбец. Термин «ключевой» означает, что значения этого
столбца уникальны в пределах таблицы. Значения в ключевых столбцах представляют собой
идентификаторы, по которым осуществляется поиск подходящей строки таблицы.

Ключевой столбец называется также столбцом первичного ключа, или просто первичным ключом.
Значения в ячейках этого столбца — идентификаторы строк.
Синтаксически первичный ключ определяется как PRIMARY KEY. Чаще всего значения первичного
ключа определяются условными целочисленными значениями — 1.2.3 и так далее. Чтобы
пользователям не потребовалось следить за нумерацией и исключать появление ошибок при вставке
значений первичного ключа, используется специальный признак автоматического приращения
значения AUTOINCREMENT.

Общепринятое
название
Синтаксис SQL Назначение ограничения
Первичный ключ PRIMARY KEY Определяет первичный ключ таблицы
Автоинкремент AUTOINCREMENT При добавлении новой строки СУБД
автоматически подставит следующее значение
ключа, равное значению ключа последней строки,
прибавив единицу.

#----------------------------------------------------------------------

FOREIGN KEY (КлючУченика) REFERENCES Ученики(КлючУченика)
ВНЕШНИЙ КЛЮЧ (КлючУченика) ССЫЛАЕТСЯ НА Ученики(КлючУченика)

#----------------------------------------------------------------------

SQLite version 3.31.1 2020-01-27 19:55:54
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
sqlite>

Нам потребуется создать новую базу данных учеников. Для этого воспользуемся командой .open
(точка + open), которая открывает действующую базу данных или создаёт новую, если базы данных с
таким именем не найдено.

sqlite>.open students.db

Мы создали базу данных. Одноимённый файл базы данных students.db теперь находится в той
директории, откуда запустился клиент sqlite3.

Команды с точкой (дот-команды)
Вероятно, вы обратили внимание, что мы открыли базу данных с использованием команды с точкой.
Такие команды не считаются командами языка запросов SQL и используются только в СУБД SQLite.
Другое название таких команд — дот-команды (dot — точка).

#-------------------------------------------------------------------------

CREATE TABLE courses (
id INTEGER PRIMARY KEY AUTOINCREMENT,
name TEXT NOT NULL UNIQUE,
lessons_amount INTEGER
);


sqlite> CREATE TABLE courses (
...> id INTEGER PRIMARY KEY AUTOINCREMENT,
...> name TEXT NOT NULL UNIQUE,
...> lessons_amount INTEGER
...> );
sqlite>


sqlite> .tables
courses
sqlite>

sqlite> .schema courses
CREATE TABLE courses (
id INTEGER PRIMARY KEY AUTOINCREMENT,
name TEXT NOT NULL UNIQUE,
lessons_amount INTEGER
);
sqlite>

#-------------------------------------------------------------------------

CREATE TABLE streams (
id INTEGER PRIMARY KEY AUTOINCREMENT,
number INTEGER NOT NULL UNIQUE,
course_id INTEGER NOT NULL,
start_date TEXT NOT NULL,
FOREIGN KEY (course_id) REFERENCES courses(id)
);


#-------------------------------------------------------------------------

CREATE TABLE students (
id INTEGER PRIMARY KEY AUTOINCREMENT,
surname TEXT NOT NULL,
name TEXT NOT NULL
);

#-------------------------------------------------------------------------

CREATE TABLE grades (
student_id INTEGER NOT NULL,
stream_id INTEGER NOT NULL,
grade REAL NOT NULL,
PRIMARY KEY(student_id, stream_id),
FOREIGN KEY (student_id) REFERENCES students(id),
FOREIGN KEY (stream_id) REFERENCES streams(id)
);

#-----------------------------------------------------------------------

sqlite> .tables
courses grades streams students
sqlite> .quit